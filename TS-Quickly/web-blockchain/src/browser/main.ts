// src/browser/main.ts
import { Blockchain, Block } from '../lib/bc_transactions.js';

// –º–æ–∂–ª–∏–≤—ñ —Å—Ç–∞—Ç—É—Å–∏ —É –ø—Ä–æ–≥—Ä–∞–º—ñ
enum Status {
  Initialization = '‚è≥ Initializing blockchain, creating genesis block...',
  AddTransaction = 'üí∏ Add one or more transactions.',
  ReadyToMine    = '‚úÖ Ready to mine a new block.',
  MineInProgress = '‚è≥ Mining a new block...'
}

const amountEl              = document.getElementById('amount') as HTMLInputElement;
const blocksEl              = document.getElementById('blocks') as HTMLDivElement;
const confirmBtn            = document.getElementById('confirm') as HTMLButtonElement;
const pendingTransactionsEl = document.getElementById('pending-transactions') as HTMLPreElement;
const recipientEl           = document.getElementById('recipient') as HTMLInputElement;
const senderEl              = document.getElementById('sender') as HTMLInputElement;
const statusEl              = document.getElementById('status') as HTMLParagraphElement;
const transferBtn           = document.getElementById('transfer') as HTMLButtonElement;

(async function main(): Promise<void> {
  // Subscribe to events
  transferBtn.addEventListener('click', addTransaction);
  confirmBtn.addEventListener('click', mineBlock);

  // –ø–æ–∫–∞–∑—É—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞—Ç—É—Å —ñ–∑ "enum Status"
  statusEl.textContent = Status.Initialization;

  // —Å—Ç–≤–æ—Ä—é—î –µ–∫–∑–µ–º–ø–ª—è—Ä –±–ª–æ–∫—á–µ–π–Ω—É
  const blockchain = new Blockchain();
  // —Å—Ç–≤–æ—Ä—é—î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –±–ª–æ–∫
  await blockchain.createGenesisBlock();
  // –≥–µ–Ω–µ—Ä—É—î HTML –º–∞–∫–µ—Ç –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–ª–æ–∫—ñ–≤
  blocksEl.innerHTML = blockchain.chain.map((b, i) => generateBlockHtml(b, i)).join('');

  statusEl.textContent = Status.AddTransaction;
  toggleState(true, false);

  // –¥–æ–¥–∞—î –æ—á—ñ–∫—É—é—á—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
  function addTransaction() {
    blockchain.createTransaction({
      sender: senderEl.value,
      recipient: recipientEl.value,
      amount: parseInt(amountEl.value),
    });

    toggleState(false, false);
    // –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ —Å—Ç—Ä–æ–∫
    pendingTransactionsEl.textContent = blockchain.pendingTransactions.map(t =>
      `${t.sender} ‚Üí ${t.recipient}: $${t.amount}`).join('\n');
    statusEl.textContent = Status.ReadyToMine;
    
    // Reset form's value.
    senderEl.value = '';
    recipientEl.value = '';
    amountEl.value = '0';
  }
  // –¥–æ–±—É–≤–∞—î –±–ª–æ–∫ –Ω–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –π–æ–≥–æ —É –±—Ä–∞—É–∑–µ—Ä—ñ
  async function mineBlock() {
    statusEl.textContent = Status.MineInProgress;
    toggleState(true, true);
    // —Å—Ç–≤–æ—Ä—é—î –±–ª–æ–∫, –¥–æ–±–∞–≤–ª—è—î —É –Ω—å–æ–≥–æ –ø—ñ–¥—ñ–±—Ä–∞–Ω–∏–π —Ö–µ—à
    await blockchain.minePendingTransactions();

    pendingTransactionsEl.textContent = 'No pending transactions at the moment.';
    statusEl.textContent = Status.AddTransaction;
    blocksEl.innerHTML = blockchain.chain.map((b, i) => generateBlockHtml(b, i)).join('');
    toggleState(true, false);
  }
})();

// –ø–µ—Ä–µ–º–∏–∫–∞—á –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–Ω–æ–ø–∫–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
function toggleState(confirmation:boolean, transferForm:boolean): void {
  transferBtn.disabled = amountEl.disabled = senderEl.disabled = recipientEl.disabled = transferForm;
  confirmBtn.disabled = confirmation;
}


function generateBlockHtml(block: Block, index: number) {
  return `
    <div class="block">
      <span class="block__index">#${index}</span>
      <span class="block__timestamp">${new Date(block.timestamp).toLocaleTimeString()}</span>
      <div class="prev-hash">
        <div class="hash-title">‚Üê PREV HASH</div>
        <div class="hash-value">${block.previousHash}</div>
      </div>
      <div class="this-hash">
        <div class="hash-title">THIS HASH</div>
        <div class="hash-value">${block.hash}</div>
      </div>
      <div class="block__transactions">
        <div class="hash-title">TRANSACTIONS</div>
        <pre class="transactions-value">${block.transactions.map(t => `${t.sender} ‚Üí ${t.recipient} - $${t.amount}`)}</pre>
      </div>
    </div>
  `;
}